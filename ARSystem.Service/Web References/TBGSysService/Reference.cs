//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ARSystem.Service.TBGSysService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckRunningJobOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmBAPSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateCollectionToAXOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertInvoiceTowerOperationCompleted;
        
        private System.Threading.SendOrPostCallback RejectBAPSOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnToBAPSOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateChecklistOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDataCoreVenOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataCoreVenOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDataSecurityUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::ARSystem.Service.Properties.Settings.Default.ARSystem_Service_TBGSysService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckRunningJobCompletedEventHandler CheckRunningJobCompleted;
        
        /// <remarks/>
        public event ConfirmBAPSCompletedEventHandler ConfirmBAPSCompleted;
        
        /// <remarks/>
        public event GenerateCollectionToAXCompletedEventHandler GenerateCollectionToAXCompleted;
        
        /// <remarks/>
        public event InsertInvoiceTowerCompletedEventHandler InsertInvoiceTowerCompleted;
        
        /// <remarks/>
        public event RejectBAPSCompletedEventHandler RejectBAPSCompleted;
        
        /// <remarks/>
        public event ReturnToBAPSCompletedEventHandler ReturnToBAPSCompleted;
        
        /// <remarks/>
        public event UpdateChecklistCompletedEventHandler UpdateChecklistCompleted;
        
        /// <remarks/>
        public event InsertDataCoreVenCompletedEventHandler InsertDataCoreVenCompleted;
        
        /// <remarks/>
        public event UpdateDataCoreVenCompletedEventHandler UpdateDataCoreVenCompleted;
        
        /// <remarks/>
        public event UpdateDataSecurityUserCompletedEventHandler UpdateDataSecurityUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRunningJob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckRunningJob(string Token, string JobName) {
            object[] results = this.Invoke("CheckRunningJob", new object[] {
                        Token,
                        JobName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRunningJobAsync(string Token, string JobName) {
            this.CheckRunningJobAsync(Token, JobName, null);
        }
        
        /// <remarks/>
        public void CheckRunningJobAsync(string Token, string JobName, object userState) {
            if ((this.CheckRunningJobOperationCompleted == null)) {
                this.CheckRunningJobOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRunningJobOperationCompleted);
            }
            this.InvokeAsync("CheckRunningJob", new object[] {
                        Token,
                        JobName}, this.CheckRunningJobOperationCompleted, userState);
        }
        
        private void OnCheckRunningJobOperationCompleted(object arg) {
            if ((this.CheckRunningJobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRunningJobCompleted(this, new CheckRunningJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConfirmBAPS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConfirmBAPS(string Token, string vXml, string UserId, int BatchID, bool IsBatch) {
            object[] results = this.Invoke("ConfirmBAPS", new object[] {
                        Token,
                        vXml,
                        UserId,
                        BatchID,
                        IsBatch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmBAPSAsync(string Token, string vXml, string UserId, int BatchID, bool IsBatch) {
            this.ConfirmBAPSAsync(Token, vXml, UserId, BatchID, IsBatch, null);
        }
        
        /// <remarks/>
        public void ConfirmBAPSAsync(string Token, string vXml, string UserId, int BatchID, bool IsBatch, object userState) {
            if ((this.ConfirmBAPSOperationCompleted == null)) {
                this.ConfirmBAPSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmBAPSOperationCompleted);
            }
            this.InvokeAsync("ConfirmBAPS", new object[] {
                        Token,
                        vXml,
                        UserId,
                        BatchID,
                        IsBatch}, this.ConfirmBAPSOperationCompleted, userState);
        }
        
        private void OnConfirmBAPSOperationCompleted(object arg) {
            if ((this.ConfirmBAPSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmBAPSCompleted(this, new ConfirmBAPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateCollectionToAX", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateCollectionToAX(
                    string Token, 
                    string journalId, 
                    int dayFPJ, 
                    int monthFPJ, 
                    int yearFPJ, 
                    string invoiceID, 
                    string itemId, 
                    string offsetAccount, 
                    string taxGroup, 
                    string taxItemGroup, 
                    string fpjNumber, 
                    string voucher, 
                    string AccountNum, 
                    string transactionText, 
                    double amountCurDebit, 
                    string currencyCode, 
                    string soNumb, 
                    string docNumb, 
                    int dayDueDate, 
                    int monthDueDate, 
                    int yearDueDate, 
                    double xRate, 
                    double amountCurCredit, 
                    string departement, 
                    string costCenter, 
                    string purpose, 
                    int dayTrans, 
                    int monthTrans, 
                    int yearTrans, 
                    string transferBy, 
                    int agsTypeAR, 
                    string company) {
            object[] results = this.Invoke("GenerateCollectionToAX", new object[] {
                        Token,
                        journalId,
                        dayFPJ,
                        monthFPJ,
                        yearFPJ,
                        invoiceID,
                        itemId,
                        offsetAccount,
                        taxGroup,
                        taxItemGroup,
                        fpjNumber,
                        voucher,
                        AccountNum,
                        transactionText,
                        amountCurDebit,
                        currencyCode,
                        soNumb,
                        docNumb,
                        dayDueDate,
                        monthDueDate,
                        yearDueDate,
                        xRate,
                        amountCurCredit,
                        departement,
                        costCenter,
                        purpose,
                        dayTrans,
                        monthTrans,
                        yearTrans,
                        transferBy,
                        agsTypeAR,
                        company});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateCollectionToAXAsync(
                    string Token, 
                    string journalId, 
                    int dayFPJ, 
                    int monthFPJ, 
                    int yearFPJ, 
                    string invoiceID, 
                    string itemId, 
                    string offsetAccount, 
                    string taxGroup, 
                    string taxItemGroup, 
                    string fpjNumber, 
                    string voucher, 
                    string AccountNum, 
                    string transactionText, 
                    double amountCurDebit, 
                    string currencyCode, 
                    string soNumb, 
                    string docNumb, 
                    int dayDueDate, 
                    int monthDueDate, 
                    int yearDueDate, 
                    double xRate, 
                    double amountCurCredit, 
                    string departement, 
                    string costCenter, 
                    string purpose, 
                    int dayTrans, 
                    int monthTrans, 
                    int yearTrans, 
                    string transferBy, 
                    int agsTypeAR, 
                    string company) {
            this.GenerateCollectionToAXAsync(Token, journalId, dayFPJ, monthFPJ, yearFPJ, invoiceID, itemId, offsetAccount, taxGroup, taxItemGroup, fpjNumber, voucher, AccountNum, transactionText, amountCurDebit, currencyCode, soNumb, docNumb, dayDueDate, monthDueDate, yearDueDate, xRate, amountCurCredit, departement, costCenter, purpose, dayTrans, monthTrans, yearTrans, transferBy, agsTypeAR, company, null);
        }
        
        /// <remarks/>
        public void GenerateCollectionToAXAsync(
                    string Token, 
                    string journalId, 
                    int dayFPJ, 
                    int monthFPJ, 
                    int yearFPJ, 
                    string invoiceID, 
                    string itemId, 
                    string offsetAccount, 
                    string taxGroup, 
                    string taxItemGroup, 
                    string fpjNumber, 
                    string voucher, 
                    string AccountNum, 
                    string transactionText, 
                    double amountCurDebit, 
                    string currencyCode, 
                    string soNumb, 
                    string docNumb, 
                    int dayDueDate, 
                    int monthDueDate, 
                    int yearDueDate, 
                    double xRate, 
                    double amountCurCredit, 
                    string departement, 
                    string costCenter, 
                    string purpose, 
                    int dayTrans, 
                    int monthTrans, 
                    int yearTrans, 
                    string transferBy, 
                    int agsTypeAR, 
                    string company, 
                    object userState) {
            if ((this.GenerateCollectionToAXOperationCompleted == null)) {
                this.GenerateCollectionToAXOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateCollectionToAXOperationCompleted);
            }
            this.InvokeAsync("GenerateCollectionToAX", new object[] {
                        Token,
                        journalId,
                        dayFPJ,
                        monthFPJ,
                        yearFPJ,
                        invoiceID,
                        itemId,
                        offsetAccount,
                        taxGroup,
                        taxItemGroup,
                        fpjNumber,
                        voucher,
                        AccountNum,
                        transactionText,
                        amountCurDebit,
                        currencyCode,
                        soNumb,
                        docNumb,
                        dayDueDate,
                        monthDueDate,
                        yearDueDate,
                        xRate,
                        amountCurCredit,
                        departement,
                        costCenter,
                        purpose,
                        dayTrans,
                        monthTrans,
                        yearTrans,
                        transferBy,
                        agsTypeAR,
                        company}, this.GenerateCollectionToAXOperationCompleted, userState);
        }
        
        private void OnGenerateCollectionToAXOperationCompleted(object arg) {
            if ((this.GenerateCollectionToAXCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateCollectionToAXCompleted(this, new GenerateCollectionToAXCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertInvoiceTower", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertInvoiceTower(string Token, int trxInvoiceHeaderId, int mstInvoiceCategoryId, string UserId) {
            object[] results = this.Invoke("InsertInvoiceTower", new object[] {
                        Token,
                        trxInvoiceHeaderId,
                        mstInvoiceCategoryId,
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertInvoiceTowerAsync(string Token, int trxInvoiceHeaderId, int mstInvoiceCategoryId, string UserId) {
            this.InsertInvoiceTowerAsync(Token, trxInvoiceHeaderId, mstInvoiceCategoryId, UserId, null);
        }
        
        /// <remarks/>
        public void InsertInvoiceTowerAsync(string Token, int trxInvoiceHeaderId, int mstInvoiceCategoryId, string UserId, object userState) {
            if ((this.InsertInvoiceTowerOperationCompleted == null)) {
                this.InsertInvoiceTowerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertInvoiceTowerOperationCompleted);
            }
            this.InvokeAsync("InsertInvoiceTower", new object[] {
                        Token,
                        trxInvoiceHeaderId,
                        mstInvoiceCategoryId,
                        UserId}, this.InsertInvoiceTowerOperationCompleted, userState);
        }
        
        private void OnInsertInvoiceTowerOperationCompleted(object arg) {
            if ((this.InsertInvoiceTowerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertInvoiceTowerCompleted(this, new InsertInvoiceTowerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RejectBAPS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RejectBAPS(string Token, string vXml, string UserId, int BatchID, bool IsBatch) {
            object[] results = this.Invoke("RejectBAPS", new object[] {
                        Token,
                        vXml,
                        UserId,
                        BatchID,
                        IsBatch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RejectBAPSAsync(string Token, string vXml, string UserId, int BatchID, bool IsBatch) {
            this.RejectBAPSAsync(Token, vXml, UserId, BatchID, IsBatch, null);
        }
        
        /// <remarks/>
        public void RejectBAPSAsync(string Token, string vXml, string UserId, int BatchID, bool IsBatch, object userState) {
            if ((this.RejectBAPSOperationCompleted == null)) {
                this.RejectBAPSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRejectBAPSOperationCompleted);
            }
            this.InvokeAsync("RejectBAPS", new object[] {
                        Token,
                        vXml,
                        UserId,
                        BatchID,
                        IsBatch}, this.RejectBAPSOperationCompleted, userState);
        }
        
        private void OnRejectBAPSOperationCompleted(object arg) {
            if ((this.RejectBAPSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RejectBAPSCompleted(this, new RejectBAPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReturnToBAPS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReturnToBAPS(string Token, string vXml, string UserId, int BatchID, bool IsBatch) {
            object[] results = this.Invoke("ReturnToBAPS", new object[] {
                        Token,
                        vXml,
                        UserId,
                        BatchID,
                        IsBatch});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReturnToBAPSAsync(string Token, string vXml, string UserId, int BatchID, bool IsBatch) {
            this.ReturnToBAPSAsync(Token, vXml, UserId, BatchID, IsBatch, null);
        }
        
        /// <remarks/>
        public void ReturnToBAPSAsync(string Token, string vXml, string UserId, int BatchID, bool IsBatch, object userState) {
            if ((this.ReturnToBAPSOperationCompleted == null)) {
                this.ReturnToBAPSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnToBAPSOperationCompleted);
            }
            this.InvokeAsync("ReturnToBAPS", new object[] {
                        Token,
                        vXml,
                        UserId,
                        BatchID,
                        IsBatch}, this.ReturnToBAPSOperationCompleted, userState);
        }
        
        private void OnReturnToBAPSOperationCompleted(object arg) {
            if ((this.ReturnToBAPSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnToBAPSCompleted(this, new ReturnToBAPSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateChecklist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateChecklist(string Token, int trxInvoiceHeaderId, int mstInvoiceCategoryId, string UserId) {
            object[] results = this.Invoke("UpdateChecklist", new object[] {
                        Token,
                        trxInvoiceHeaderId,
                        mstInvoiceCategoryId,
                        UserId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateChecklistAsync(string Token, int trxInvoiceHeaderId, int mstInvoiceCategoryId, string UserId) {
            this.UpdateChecklistAsync(Token, trxInvoiceHeaderId, mstInvoiceCategoryId, UserId, null);
        }
        
        /// <remarks/>
        public void UpdateChecklistAsync(string Token, int trxInvoiceHeaderId, int mstInvoiceCategoryId, string UserId, object userState) {
            if ((this.UpdateChecklistOperationCompleted == null)) {
                this.UpdateChecklistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateChecklistOperationCompleted);
            }
            this.InvokeAsync("UpdateChecklist", new object[] {
                        Token,
                        trxInvoiceHeaderId,
                        mstInvoiceCategoryId,
                        UserId}, this.UpdateChecklistOperationCompleted, userState);
        }
        
        private void OnUpdateChecklistOperationCompleted(object arg) {
            if ((this.UpdateChecklistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateChecklistCompleted(this, new UpdateChecklistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertDataCoreVen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertDataCoreVen(string Token, CoreVen oCoreVen) {
            object[] results = this.Invoke("InsertDataCoreVen", new object[] {
                        Token,
                        oCoreVen});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertDataCoreVenAsync(string Token, CoreVen oCoreVen) {
            this.InsertDataCoreVenAsync(Token, oCoreVen, null);
        }
        
        /// <remarks/>
        public void InsertDataCoreVenAsync(string Token, CoreVen oCoreVen, object userState) {
            if ((this.InsertDataCoreVenOperationCompleted == null)) {
                this.InsertDataCoreVenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDataCoreVenOperationCompleted);
            }
            this.InvokeAsync("InsertDataCoreVen", new object[] {
                        Token,
                        oCoreVen}, this.InsertDataCoreVenOperationCompleted, userState);
        }
        
        private void OnInsertDataCoreVenOperationCompleted(object arg) {
            if ((this.InsertDataCoreVenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDataCoreVenCompleted(this, new InsertDataCoreVenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDataCoreVen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateDataCoreVen(string Token, string ProgressID, int LogNo) {
            object[] results = this.Invoke("UpdateDataCoreVen", new object[] {
                        Token,
                        ProgressID,
                        LogNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataCoreVenAsync(string Token, string ProgressID, int LogNo) {
            this.UpdateDataCoreVenAsync(Token, ProgressID, LogNo, null);
        }
        
        /// <remarks/>
        public void UpdateDataCoreVenAsync(string Token, string ProgressID, int LogNo, object userState) {
            if ((this.UpdateDataCoreVenOperationCompleted == null)) {
                this.UpdateDataCoreVenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataCoreVenOperationCompleted);
            }
            this.InvokeAsync("UpdateDataCoreVen", new object[] {
                        Token,
                        ProgressID,
                        LogNo}, this.UpdateDataCoreVenOperationCompleted, userState);
        }
        
        private void OnUpdateDataCoreVenOperationCompleted(object arg) {
            if ((this.UpdateDataCoreVenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataCoreVenCompleted(this, new UpdateDataCoreVenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDataSecurityUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateDataSecurityUser(string Token, SecurityUser oSecurityUser) {
            object[] results = this.Invoke("UpdateDataSecurityUser", new object[] {
                        Token,
                        oSecurityUser});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateDataSecurityUserAsync(string Token, SecurityUser oSecurityUser) {
            this.UpdateDataSecurityUserAsync(Token, oSecurityUser, null);
        }
        
        /// <remarks/>
        public void UpdateDataSecurityUserAsync(string Token, SecurityUser oSecurityUser, object userState) {
            if ((this.UpdateDataSecurityUserOperationCompleted == null)) {
                this.UpdateDataSecurityUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDataSecurityUserOperationCompleted);
            }
            this.InvokeAsync("UpdateDataSecurityUser", new object[] {
                        Token,
                        oSecurityUser}, this.UpdateDataSecurityUserOperationCompleted, userState);
        }
        
        private void OnUpdateDataSecurityUserOperationCompleted(object arg) {
            if ((this.UpdateDataSecurityUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDataSecurityUserCompleted(this, new UpdateDataSecurityUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class CoreVen {
        
        private int appl_noField;
        
        private string sONumberField;
        
        private int caseIDField;
        
        private string remarksField;
        
        private string userIDField;
        
        /// <remarks/>
        public int appl_no {
            get {
                return this.appl_noField;
            }
            set {
                this.appl_noField = value;
            }
        }
        
        /// <remarks/>
        public string SONumber {
            get {
                return this.sONumberField;
            }
            set {
                this.sONumberField = value;
            }
        }
        
        /// <remarks/>
        public int CaseID {
            get {
                return this.caseIDField;
            }
            set {
                this.caseIDField = value;
            }
        }
        
        /// <remarks/>
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
        
        /// <remarks/>
        public string UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SecurityUser {
        
        private string useridField;
        
        private string user_nameField;
        
        private string emailField;
        
        private string tlp_HP_numberField;
        
        private string passwordField;
        
        private string region_idField;
        
        private string is_activeField;
        
        private string div_idField;
        
        private string dept_idField;
        
        private string signatureField;
        
        private string group_idField;
        
        private string group_id_dashboardField;
        
        private string job_idField;
        
        private string picField;
        
        private System.DateTime expired_pwd_dateField;
        
        private string audit_userField;
        
        private System.DateTime audit_dateField;
        
        private string modified_userField;
        
        private System.DateTime modified_dateField;
        
        private string tlp_HP_number2Field;
        
        private string faxField;
        
        private string isMFOField;
        
        private string isSupervisorCLusterField;
        
        private string is_CC_MemberField;
        
        private string is_CC_SpvField;
        
        private string isSitacSPVField;
        
        private string isCMECoordinatorField;
        
        private string isWaspangField;
        
        private string userid_domainField;
        
        /// <remarks/>
        public string userid {
            get {
                return this.useridField;
            }
            set {
                this.useridField = value;
            }
        }
        
        /// <remarks/>
        public string user_name {
            get {
                return this.user_nameField;
            }
            set {
                this.user_nameField = value;
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string tlp_HP_number {
            get {
                return this.tlp_HP_numberField;
            }
            set {
                this.tlp_HP_numberField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string region_id {
            get {
                return this.region_idField;
            }
            set {
                this.region_idField = value;
            }
        }
        
        /// <remarks/>
        public string is_active {
            get {
                return this.is_activeField;
            }
            set {
                this.is_activeField = value;
            }
        }
        
        /// <remarks/>
        public string div_id {
            get {
                return this.div_idField;
            }
            set {
                this.div_idField = value;
            }
        }
        
        /// <remarks/>
        public string dept_id {
            get {
                return this.dept_idField;
            }
            set {
                this.dept_idField = value;
            }
        }
        
        /// <remarks/>
        public string signature {
            get {
                return this.signatureField;
            }
            set {
                this.signatureField = value;
            }
        }
        
        /// <remarks/>
        public string group_id {
            get {
                return this.group_idField;
            }
            set {
                this.group_idField = value;
            }
        }
        
        /// <remarks/>
        public string group_id_dashboard {
            get {
                return this.group_id_dashboardField;
            }
            set {
                this.group_id_dashboardField = value;
            }
        }
        
        /// <remarks/>
        public string job_id {
            get {
                return this.job_idField;
            }
            set {
                this.job_idField = value;
            }
        }
        
        /// <remarks/>
        public string pic {
            get {
                return this.picField;
            }
            set {
                this.picField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime expired_pwd_date {
            get {
                return this.expired_pwd_dateField;
            }
            set {
                this.expired_pwd_dateField = value;
            }
        }
        
        /// <remarks/>
        public string audit_user {
            get {
                return this.audit_userField;
            }
            set {
                this.audit_userField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime audit_date {
            get {
                return this.audit_dateField;
            }
            set {
                this.audit_dateField = value;
            }
        }
        
        /// <remarks/>
        public string modified_user {
            get {
                return this.modified_userField;
            }
            set {
                this.modified_userField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime modified_date {
            get {
                return this.modified_dateField;
            }
            set {
                this.modified_dateField = value;
            }
        }
        
        /// <remarks/>
        public string tlp_HP_number2 {
            get {
                return this.tlp_HP_number2Field;
            }
            set {
                this.tlp_HP_number2Field = value;
            }
        }
        
        /// <remarks/>
        public string Fax {
            get {
                return this.faxField;
            }
            set {
                this.faxField = value;
            }
        }
        
        /// <remarks/>
        public string IsMFO {
            get {
                return this.isMFOField;
            }
            set {
                this.isMFOField = value;
            }
        }
        
        /// <remarks/>
        public string IsSupervisorCLuster {
            get {
                return this.isSupervisorCLusterField;
            }
            set {
                this.isSupervisorCLusterField = value;
            }
        }
        
        /// <remarks/>
        public string Is_CC_Member {
            get {
                return this.is_CC_MemberField;
            }
            set {
                this.is_CC_MemberField = value;
            }
        }
        
        /// <remarks/>
        public string Is_CC_Spv {
            get {
                return this.is_CC_SpvField;
            }
            set {
                this.is_CC_SpvField = value;
            }
        }
        
        /// <remarks/>
        public string IsSitacSPV {
            get {
                return this.isSitacSPVField;
            }
            set {
                this.isSitacSPVField = value;
            }
        }
        
        /// <remarks/>
        public string IsCMECoordinator {
            get {
                return this.isCMECoordinatorField;
            }
            set {
                this.isCMECoordinatorField = value;
            }
        }
        
        /// <remarks/>
        public string IsWaspang {
            get {
                return this.isWaspangField;
            }
            set {
                this.isWaspangField = value;
            }
        }
        
        /// <remarks/>
        public string userid_domain {
            get {
                return this.userid_domainField;
            }
            set {
                this.userid_domainField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void CheckRunningJobCompletedEventHandler(object sender, CheckRunningJobCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRunningJobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRunningJobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ConfirmBAPSCompletedEventHandler(object sender, ConfirmBAPSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmBAPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmBAPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GenerateCollectionToAXCompletedEventHandler(object sender, GenerateCollectionToAXCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateCollectionToAXCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateCollectionToAXCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertInvoiceTowerCompletedEventHandler(object sender, InsertInvoiceTowerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertInvoiceTowerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertInvoiceTowerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void RejectBAPSCompletedEventHandler(object sender, RejectBAPSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RejectBAPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RejectBAPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ReturnToBAPSCompletedEventHandler(object sender, ReturnToBAPSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnToBAPSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnToBAPSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateChecklistCompletedEventHandler(object sender, UpdateChecklistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateChecklistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateChecklistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void InsertDataCoreVenCompletedEventHandler(object sender, InsertDataCoreVenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertDataCoreVenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertDataCoreVenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateDataCoreVenCompletedEventHandler(object sender, UpdateDataCoreVenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataCoreVenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataCoreVenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void UpdateDataSecurityUserCompletedEventHandler(object sender, UpdateDataSecurityUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateDataSecurityUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateDataSecurityUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591